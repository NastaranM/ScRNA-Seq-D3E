installr: install.packages("installr")
install.packages("installr")
installr: install.packages("installr")
library(installr)
updateR()
devtools::load_all(".")
library(D3E)
library(testthat)
library(D3E)
updateR()
library(D3E)
library(testthat)
library(D3E)
library(testthat)
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
})
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
})
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
})
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
})
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
expect_error(per_cell_data("ab"))
})
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
expect_error(per_cell_data("ab"))
expect_condition(per_cell_data(1))
})
data = matrix(c(1,2,3,5,6,8,3,1),nrow = 2)
per_cell_data(data,2)
n = dim(data)[2]
n
m = (n-1)/2
m
data = matrix(c(1,2,3,5,6,8,3,1),nrow = 2)
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
expect_error(per_cell_data("ab"))
expect_error(per_cell_data(1))
expect_error(per_cell_data(data))
})
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
expect_error(per_cell_data("ab"))
expect_error(per_cell_data(1))
expect_error(per_cell_data(data))
expect_error(per_cell_data(data,2))
})
n
m
try(if(m != round(m))
stop("The data should be balanced and the first row should represent the genes"))
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
expect_error(per_cell_data("ab"))
expect_error(per_cell_data(1))
expect_error(per_cell_data(data))
expect_condition(per_cell_data(data,2))
})
round(m)
per_cell_data = function(data, no_type_of_cell){
#if(type_of_cell<2)
#  stop('The number of cells should be at least equal to 1')
try(if (dim(data)[1] < 2)
stop("The number of genes should be more than 1"))
# creating a cell name for each cell:
label = paste("cell", 1:no_type_of_cell, sep = "")
n = dim(data)[2]
m = (n-1)/no_type_of_cell
if(m != round(m))
stop("The data should be balanced and the first row should represent the genes")
cells = NULL
for(i in 1:length(label)){
cells = append(cells,paste(label[i], 1:m, sep = "_"))
}
names(data) = c("GeneType", cells)
return(data)}
test_that("geometric_mean",{
expect_error(geometric_mean(NA))
expect_error(geometric_mean(NULL))
expect_condition(geometric_mean("ab"))
expect_condition(geometric_mean(2))
expect_condition(geometric_mean(c(2,3)))
expect_equal(geometric_mean(data) ,c(4.481689,54.598150,1096.633158,7.389056))
})
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
expect_error(per_cell_data("ab"))
expect_error(per_cell_data(1))
expect_error(per_cell_data(data))
expect_condition(per_cell_data(data,2))
})
expect_condition(per_cell_data(data,2))
expect_error(per_cell_data(data,2))
test_that("per_cell_data",{
expect_error(per_cell_data(NA))
expect_error(per_cell_data(NULL))
expect_condition(per_cell_data(NA))
expect_condition(per_cell_data(NULL))
expect_error(per_cell_data("ab"))
expect_error(per_cell_data(1))
expect_error(per_cell_data(data))
expect_condition(per_cell_data(data,2))
expect_error(per_cell_data(data,2))
})
dim(data)
data = matrix(c(1,2,3,5,6,8,3,1,5,7,8),nrow = 2)
data = matrix(c(1,2,3,5,6,8,3,1,5,7,8,9),nrow = 2)
per_cell_data(data,2)
per_cell_data(data,3)
data
data = matrix(c(1,2,3,5,6,8,3,1,5,7),nrow = 2)
testdata = matrix(c(1,2,3,5,6,8,3,1,5,7),nrow = 2)
per_cell_data(testdata,2)
library(D3E)
data1 <- read.delim("C:/Users/nasta/Desktop/5_cell_types_2500_cells_each.txt", header=FALSE, row.names=1)
View(data1)
data1 <- data1[,2450:2550]
names(data1)
dimnames(data1)
library(D3E)
library(D3E)
