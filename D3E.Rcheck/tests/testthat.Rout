
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(D3E)
Loading required package: tidyverse
-- [1mAttaching packages[22m --------------------------------------- tidyverse 1.3.0 --
[32mv[39m [34mggplot2[39m 3.3.3     [32mv[39m [34mpurrr  [39m 0.3.4
[32mv[39m [34mtibble [39m 3.0.4     [32mv[39m [34mdplyr  [39m 1.0.2
[32mv[39m [34mtidyr  [39m 1.1.2     [32mv[39m [34mstringr[39m 1.4.0
[32mv[39m [34mreadr  [39m 1.4.0     [32mv[39m [34mforcats[39m 0.5.0
-- [1mConflicts[22m ------------------------------------------ tidyverse_conflicts() --
[31mx[39m [34mdplyr[39m::[32mfilter()[39m  masks [34mstats[39m::filter()
[31mx[39m [34mpurrr[39m::[32mis_null()[39m masks [34mtestthat[39m::is_null()
[31mx[39m [34mdplyr[39m::[32mlag()[39m     masks [34mstats[39m::lag()
[31mx[39m [34mdplyr[39m::[32mmatches()[39m masks [34mtidyr[39m::matches(), [34mtestthat[39m::matches()
Loading required package: magrittr

Attaching package: 'magrittr'

The following object is masked from 'package:purrr':

    set_names

The following object is masked from 'package:tidyr':

    extract

The following objects are masked from 'package:testthat':

    equals, is_less_than, not

Loading required package: twosamples
Loading required package: matrixStats

Attaching package: 'matrixStats'

The following object is masked from 'package:dplyr':

    count

> 
> data = matrix(c(1,2,3,5,6,8,3,1),nrow = 2)
> 
> test_that("geometric_mean",{
+   expect_error(geometric_mean(NA))
+   expect_error(geometric_mean(NULL))
+   expect_condition(geometric_mean("ab"))
+   expect_condition(geometric_mean(2))
+   expect_condition(geometric_mean(c(2,3)))
+   expect_equal(geometric_mean(data) ,c(4.481689,54.598150,1096.633158,7.389056))
+ })
Error in try(if (any(is.na(data))) stop("Please remove NA values")) : 
  Please remove NA values
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
[32mTest passed[39m 
> 
> 
> test_that("weight_normalization",{
+   expect_error(weight_normalization(NA))
+   expect_error(geometric_mean(NULL))
+   expect_condition(geometric_mean("ab"))
+   expect_condition(geometric_mean(2))
+   expect_condition(geometric_mean(c(2,3)))
+   expect_equal(weight_normalization(data), c(0.557825400,0.091578194,0.007295056,0.406005850))
+ })
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (any(is.na(data))) stop("Please remove NA values")) : 
  Please remove NA values
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
[32mTest passed[39m 
> 
> test_that("normalized_data",{
+   expect_error(normalized_data(NA))
+   expect_error(normalized_data(NULL))
+   expect_condition(normalized_data("ab"))
+   expect_condition(normalized_data(2))
+   expect_condition(normalized_data(c(2,3)))
+   expect_error(normalized_data(data))
+   expect_error(normalized_data(data,data))
+   expect_error(normalized_data(data,"a"))
+   expect_error(normalized_data(data,c(1,23,4)))
+   expect_equal(normalized_data(data,c(1,2,4,5)),
+                matrix(c(1,0.75,6,0.75,1,1.00,4,0.20),nrow = 2, byrow = TRUE))
+ })
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (length(weights) == 0) stop("Input length is not correct")) : 
  argument "weights" is missing, with no default
Error in try(if (any(is.na(data))) stop("Please remove NA values")) : 
  Please remove NA values
Error in try(if (any(is.na(weights))) stop("Please remove NA values")) : 
  argument "weights" is missing, with no default
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (length(weights) == 0) stop("Input length is not correct")) : 
  argument "weights" is missing, with no default
Error in try(if (any(is.na(weights))) stop("Please remove NA values")) : 
  argument "weights" is missing, with no default
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (length(weights) == 0) stop("Input length is not correct")) : 
  argument "weights" is missing, with no default
Error in try(if (any(is.na(weights))) stop("Please remove NA values")) : 
  argument "weights" is missing, with no default
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (length(weights) == 0) stop("Input length is not correct")) : 
  argument "weights" is missing, with no default
Error in try(if (any(is.na(weights))) stop("Please remove NA values")) : 
  argument "weights" is missing, with no default
Error in try(if (is.null(dim(data))) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (length(weights) == 0) stop("Input length is not correct")) : 
  argument "weights" is missing, with no default
Error in try(if (any(is.na(weights))) stop("Please remove NA values")) : 
  argument "weights" is missing, with no default
Error in try(if (length(weights) == 0) stop("Input length is not correct")) : 
  argument "weights" is missing, with no default
Error in try(if (any(is.na(weights))) stop("Please remove NA values")) : 
  argument "weights" is missing, with no default
[32mTest passed[39m 
> 
> test_that("kolmogorov_smirnov_test",{
+   expect_equal(kolmogorov_smirnov_test("a"),-1)
+   expect_equal(kolmogorov_smirnov_test("a",1),-1)
+   expect_equal(kolmogorov_smirnov_test(1),-1)
+   expect_equal(kolmogorov_smirnov_test(c(1,2)),-1)
+ 
+ })
[32mTest passed[39m 
> 
> test_that("anderson_darling_test",{
+   expect_equal(anderson_darling_test("a"),-1)
+   expect_equal(anderson_darling_test("a",1),-1)
+   expect_equal(anderson_darling_test(1),-1)
+   expect_equal(anderson_darling_test(c(1,2)),-1)
+ 
+ })
[32mTest passed[39m 
> 
> 
> test_that("cramer_von_masis",{
+   expect_equal(cramer_von_masis("a"),-1)
+   expect_equal(cramer_von_masis("a",1),-1)
+   expect_equal(cramer_von_masis(1),-1)
+   expect_equal(cramer_von_masis(c(1,2)),-1)
+ 
+ })
[32mTest passed[39m 
> 
> test_that("distribution_test",{
+   expect_error(distribution_test("a"))
+   expect_error(distribution_test("a",1))
+   expect_error(distribution_test(1))
+   expect_error(distribution_test(c(1,2)))
+   expect_error(distribution_test(NA))
+   expect_error(distribution_test(NULL))
+   expect_error(distribution_test(Inf))
+ 
+ })
[32mTest passed[39m 
> 
> test_that("rand_Poisson_beta",{
+   expect_error(rand_Poisson_beta(data))
+   expect_error(rand_Poisson_beta(data,1))
+   expect_error(rand_Poisson_beta(1))
+   expect_error(rand_Poisson_beta(NA))
+   expect_error(rand_Poisson_beta(NULL))
+   expect_error(rand_Poisson_beta(Inf))
+   expect_condition(rand_Poisson_beta())
+ })
[32mTest passed[39m 
> 
> test_that("get_para_moments",{
+   expect_error(get_para_moments(NULL))
+   expect_condition(get_para_moments())
+   expect_error(get_para_moments("a"))
+   expect_error(get_para_moments("a",1))
+ })
[32mTest passed[39m 
> 
> test_that("get_para_bayesian",{
+   expect_error(get_para_moments(NULL))
+   expect_condition(get_para_moments())
+   expect_error(get_para_moments("a"))
+   expect_error(get_para_moments("a",1))
+ })
[32mTest passed[39m 
> 
> 
> test_that("goodness_of_fit",{
+   expect_error(goodness_of_fit(NULL))
+   expect_condition(goodness_of_fit())
+   expect_error(goodness_of_fit("a"))
+   expect_error(goodness_of_fit("a",1))
+   expect_error(goodness_of_fit(data))
+   expect_error(goodness_of_fit(data,data,data,data))
+   expect_error(goodness_of_fit(data,2,"A"))
+   expect_error(goodness_of_fit(data,2,4))
+   expect_error(goodness_of_fit(data,2,3,10,1))
+ 
+ })
[32mTest passed[39m 
> 
> test_that("log_likelihood",{
+   expect_error(log_likelihood(NULL))
+   expect_condition(log_likelihood())
+   expect_error(log_likelihood("a"))
+   expect_error(log_likelihood("a",1))
+   expect_error(log_likelihood(data))
+   expect_error(log_likelihood(data,data,data,data))
+   expect_error(log_likelihood(data,2,"A"))
+   expect_error(log_likelihood(data,2,4))
+   expect_error(log_likelihood(2))
+   expect_error(log_likelihood(data,2,3,10,1))
+ })
[32mTest passed[39m 
> 
> test_that("likelihood_ratio",{
+   expect_error(likelihood_ratio(NULL))
+   expect_condition(likelihood_ratio())
+   expect_error(likelihood_ratio("a"))
+   expect_error(likelihood_ratio("a",1))
+   expect_error(likelihood_ratio(data))
+   expect_error(likelihood_ratio(data,data,data,data))
+   expect_error(likelihood_ratio(data,2,"A"))
+   expect_error(likelihood_ratio(data,2,4))
+   expect_error(likelihood_ratio(2))
+   expect_error(likelihood_ratio(data,2,3,10,1))
+   expect_error(likelihood_ratio(0))
+ })
[32mTest passed[39m 
> 
> test_that("control_split",{
+   expect_error(control_split(5))
+   expect_condition(control_split())
+   expect_error(control_split(c(1,3,5),"q"))
+   expect_error(control_split(data,1))
+   expect_error(control_split(NA))
+   expect_error(control_split(Inf))
+   expect_error(control_split(NULL))
+ 
+ })
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (any(is.na(normalized_dataset))) stop("Please remove NA values")) : 
  argument "normalized_dataset" is missing, with no default
Error in try(if (is.null(normalized_dataset)) stop("The dimensions of the data is not correct")) : 
  argument "normalized_dataset" is missing, with no default
Error in colnames(normalized_dataset) : 
  argument "normalized_dataset" is missing, with no default
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (length(type_of_cells) == 0) stop("Please enter a cellname from the type of cells")) : 
  Please enter a cellname from the type of cells
Error in try(if (length(type_of_cells) == 0) stop("Please enter a cellname from the type of cells")) : 
  Please enter a cellname from the type of cells
Error in try(if (any(is.na(normalized_dataset))) stop("Please remove NA values")) : 
  Please remove NA values
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (is.null(normalized_dataset)) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
[32mTest passed[39m 
> 
> test_that("comparison_data",{
+   expect_error(comparison_data(5))
+   expect_condition(comparison_data())
+   expect_error(comparison_data(c(1,3,5),"q"))
+   expect_error(comparison_data(NA))
+   expect_error(comparison_data(Inf))
+   expect_error(comparison_data(NULL))
+ })
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (any(is.na(normalized_dataset))) stop("Please remove NA values")) : 
  argument "normalized_dataset" is missing, with no default
Error in try(if (is.null(normalized_dataset)) stop("The dimensions of the data is not correct")) : 
  argument "normalized_dataset" is missing, with no default
Error in colnames(normalized_dataset) : 
  argument "normalized_dataset" is missing, with no default
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (length(type_of_cells) == 0) stop("Please enter a cellname from the type of cells")) : 
  Please enter a cellname from the type of cells
Error in try(if (any(is.na(normalized_dataset))) stop("Please remove NA values")) : 
  Please remove NA values
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
Error in try(if (is.null(normalized_dataset)) stop("The dimensions of the data is not correct")) : 
  The dimensions of the data is not correct
Error in try(if (any(is.na(cellname))) stop("Please provide a valid cellname")) : 
  argument "cellname" is missing, with no default
[32mTest passed[39m 
> 
> test_that("finding_threshold",{
+   expect_equal(finding_threshold(data,c(0.5,0.5)),list("pvalues" = c(0.5,0.5), "significant" = 0.5))
+   expect_error(finding_threshold(data))
+   expect_error(finding_threshold(NA))
+   expect_error(finding_threshold(NULL))
+   expect_error(finding_threshold(Inf))
+   expect_error(finding_threshold())
+   expect_error(finding_threshold(2,2))
+ })
[32mTest passed[39m 
> 
> test_that("check_cramer_von_mises",{
+   expect_equal(check_cramer_von_mises(-1,"hi"),"hi")
+   expect_equal(check_cramer_von_mises("hi"),NULL)
+ })
[32mTest passed[39m 
> 
> test_that("parameter_estimation",{
+   expect_error(parameter_estimation(1))
+   expect_error(parameter_estimation(1,2))
+   expect_error(parameter_estimation(data,1,1))
+   expect_error(parameter_estimation(NA))
+   expect_error(parameter_estimation(NULL))
+   expect_error(parameter_estimation(Inf))
+   expect_error(parameter_estimation(data,data,2,1))
+   expect_error(parameter_estimation(data,data,2,5))
+ })
Error in mod %in% c(0, 1) : argument "mod" is missing, with no default
Error in method %in% c(0, 1, 2, 3) : 
  argument "method" is missing, with no default
Error in mod %in% c(0, 1) : argument "mod" is missing, with no default
Error in method %in% c(0, 1, 2, 3) : 
  argument "method" is missing, with no default
Error in method %in% c(0, 1, 2, 3) : 
  argument "method" is missing, with no default
Error in mod %in% c(0, 1) : argument "mod" is missing, with no default
Error in method %in% c(0, 1, 2, 3) : 
  argument "method" is missing, with no default
Error in mod %in% c(0, 1) : argument "mod" is missing, with no default
Error in method %in% c(0, 1, 2, 3) : 
  argument "method" is missing, with no default
Error in mod %in% c(0, 1) : argument "mod" is missing, with no default
Error in method %in% c(0, 1, 2, 3) : 
  argument "method" is missing, with no default
Error in try(if (!(mod %in% c(0, 1))) stop("select a mode of analysis from 0 and 1")) : 
  select a mode of analysis from 0 and 1
Error in try(if (!(mod %in% c(0, 1))) stop("select a mode of analysis from 0 and 1")) : 
  select a mode of analysis from 0 and 1
Error in try(if (!(method %in% c(0, 1, 2, 3))) stop("select a method between 0 to 3 for distributio test")) : 
  select a method between 0 to 3 for distributio test
[32mTest passed[39m 
> 
> proc.time()
   user  system elapsed 
   2.01    0.32    2.29 
